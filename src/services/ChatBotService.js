import { GoogleGenerativeAI } from '@google/generative-ai';

class ChatBotService {
  constructor() {
    this.apiKey = import.meta.env.VITE_GOOGLE_GEMINI_API_KEY;
    this.genAI = new GoogleGenerativeAI(this.apiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
    
    // Define EduConnect platform context
    this.platformContext = `
B·∫°n l√† tr·ª£ l√Ω AI cho n·ªÅn t·∫£ng EduConnect - m·ªôt n·ªÅn t·∫£ng h·ªçc t·∫≠p tr·ª±c tuy·∫øn ƒë·ªôc ƒë√°o.

TH√îNG TIN V·ªÄ EDUCONNECT:
- EduConnect l√† n·ªÅn t·∫£ng cho ph√©p m·ªçi ng∆∞·ªùi t·∫°o v√† ƒëƒÉng t·∫£i c√°c b√†i gi·∫£ng c·ªßa ri√™ng m√¨nh
- Ng∆∞·ªùi d√πng c√≥ th·ªÉ chia s·∫ª ki·∫øn th·ª©c v√† kinh nghi·ªám v·ªõi c·ªông ƒë·ªìng
- M·ªçi ng∆∞·ªùi c√≥ th·ªÉ xem v√† h·ªçc t·ª´ c√°c b√†i gi·∫£ng c·ªßa ng∆∞·ªùi d√πng kh√°c
- ƒê√¢y l√† s√¢n ch∆°i m·ªü ƒë·ªÉ h·ªçc t·∫≠p v√† k·∫øt n·ªëi tr√™n nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau
- N·ªÅn t·∫£ng khuy·∫øn kh√≠ch vi·ªác chia s·∫ª ki·∫øn th·ª©c hai chi·ªÅu gi·ªØa c√°c th√†nh vi√™n

VAI TR√í C·ª¶A B·∫†N:
- H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa EduConnect
- Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ c√°ch t·∫°o, ƒëƒÉng t·∫£i v√† qu·∫£n l√Ω b√†i gi·∫£ng
- Gi√∫p ƒë·ª° trong vi·ªác t√¨m ki·∫øm v√† truy c·∫≠p n·ªôi dung h·ªçc t·∫≠p
- H·ªó tr·ª£ k·∫øt n·ªëi v√† t∆∞∆°ng t√°c gi·ªØa c√°c th√†nh vi√™n
- ƒê∆∞a ra l·ªùi khuy√™n v·ªÅ vi·ªác h·ªçc t·∫≠p hi·ªáu qu·∫£ tr√™n n·ªÅn t·∫£ng

PHONG C√ÅCH GIAO TI·∫æP:
- Th√¢n thi·ªán, nhi·ªát t√¨nh v√† h·ªó tr·ª£ t√≠ch c·ª±c
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n
- T·∫≠p trung v√†o gi·∫£i ph√°p th·ª±c t·∫ø cho ng∆∞·ªùi d√πng EduConnect
- Khuy·∫øn kh√≠ch tinh th·∫ßn h·ªçc t·∫≠p v√† chia s·∫ª ki·∫øn th·ª©c

H√£y lu√¥n ∆∞u ti√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn EduConnect v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng t·∫≠n d·ª•ng t·ªëi ƒëa n·ªÅn t·∫£ng n√†y.
`;

    // Initialize chat history
    this.chatHistory = this.loadChatHistoryFromLocalStorage();
    
    // Add welcome message if chat history is empty
    if (this.chatHistory.length === 0) {
      const welcomeMessage = {
        role: 'bot',
        content: `Xin ch√†o! T√¥i l√† tr·ª£ l√Ω EduConnect üëã
T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
- T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc
- H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng n·ªÅn t·∫£ng
- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi h·ªçc t·∫≠p
H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n c·∫ßn!`,
        timestamp: new Date().toISOString(),
      };
      this.chatHistory.push(welcomeMessage);
      this.saveChatHistoryToLocalStorage();
    }
  }

  // Load chat history from localStorage
  loadChatHistoryFromLocalStorage() {
    const storedHistory = localStorage.getItem('chatHistory');
    return storedHistory ? JSON.parse(storedHistory) : [];
  }

  // Save chat history to localStorage
  saveChatHistoryToLocalStorage() {
    localStorage.setItem('chatHistory', JSON.stringify(this.chatHistory));
  }

  // Clear chat history
  clearChatHistory() {
    this.chatHistory = [];
    localStorage.removeItem('chatHistory');
    return this.chatHistory;
  }

  // Get the entire chat history
  getChatHistory() {
    return this.chatHistory;
  }

  // Send a message to the chatbot and get a response
  async sendMessage(message, skipAddingUserMessage = false) {
    try {
      // Ch·ªâ th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ n·∫øu kh√¥ng b·ªã b·ªè qua
      if (!skipAddingUserMessage) {
        this.chatHistory.push({
          role: 'user',
          content: message,
          timestamp: new Date().toISOString()
        });
      }
      
      // T·∫°o prompt v·ªõi ng·ªØ c·∫£nh EduConnect
      const contextualMessage = `${this.platformContext}\n\nC√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${message}`;
      
      // G·ª≠i tin nh·∫Øn ƒë·∫øn chatbot
      const result = await this.model.generateContent(contextualMessage);
      
      // X·ª≠ l√Ω ph·∫£n h·ªìi v√† c·∫≠p nh·∫≠t l·ªãch s·ª≠
      const response = result.response;
      const botMessage = {
        role: 'bot',
        content: response.text(),
        timestamp: new Date().toISOString()
      };
      
      this.chatHistory.push(botMessage);
      this.saveChatHistoryToLocalStorage();
      
      return botMessage;
    } catch (error) {
      console.error('Error in ChatBotService:', error);
      // Th√™m tin nh·∫Øn l·ªói
      const errorMessage = {
        role: 'bot',
        content: 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.',
        timestamp: new Date().toISOString(),
        error: true
      };
      
      this.chatHistory.push(errorMessage);
      this.saveChatHistoryToLocalStorage();
      
      throw error;
    }
  }
}

// Create and export a singleton instance
const chatBotService = new ChatBotService();
export default chatBotService;